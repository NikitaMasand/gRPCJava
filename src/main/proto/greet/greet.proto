syntax = "proto3";
package greet;

option java_package = "generatedclass.proto.greet";
option java_multiple_files = true;

message Greeting {
    string first_name = 1;
    string last_name = 2;
}

message GreetRequest {
    Greeting greeting = 1;
}

message GreetResponse {
    string result = 1;
}

message GreetManyTimesRequest {
    Greeting greeting = 1;
}

message GreetManyTimesResponse {
    string result = 1;
}

message LongGreetRequest {
    Greeting greeting = 1;
}

message LongGreetResponse {
    string result = 1;
}

message GreetEveryoneRequest {
    Greeting greeting = 1;
}

message GreetEveryoneResponse {
    string result = 1;
}

service GreetService {

    //Unary
    rpc Greet(GreetRequest) returns (GreetResponse) {};

    //server streaming
    rpc GreetManyTimes(GreetManyTimesRequest) returns (stream GreetManyTimesResponse) {};

    //client streaming
    rpc LongGreet(stream LongGreetRequest) returns (LongGreetResponse) {};

    //bidi streaming
    rpc GreetEveryone(stream GreetEveryoneRequest) returns (stream GreetEveryoneResponse) {};
}

//server streaming
// the client sends one message to the server and will receive many
//responses from the server, possibly an infinite number
//well suited when server needs to send lot of data (big data)
//or when the server wants to push data to the client without having the client
//request for more data like live feed, chat, etc.

//client streaming
// the client sends many messages to the server and receives only one response from the server
// at any time
//it is useful when the client needs to send a lot of data
//or when the server processing is expensive thus should happen as and when the client sends data
//or when the client needs to push data to server, without expecting any response from the server

//bidirectional streaming
//the client sends many messages to the server and receives many responses from the server
//the number of requests and response do not have to match
//used when client and server need to send each other lot of data asynchronously like for chat protocol
//or long running connections


